{"version":3,"sources":["api/ApiError.ts","reportWebVitals.ts","components/Page.tsx","config.ts","token.tsx","components/Guard.tsx","components/guards/NotAuthenticatedGuard.tsx","pages/SignInPage/SignInPage.tsx","queryClient.ts","hooks/useAuthenticatedQuery.ts","utils/checkTypesByKeys.ts","api/data/UserBasicInfo.ts","utils/isArrayOf.ts","utils/isString.ts","api/data/Review.ts","api/review.ts","api/user.ts","api/data/User.ts","hooks/queries/useMe.ts","layouts/GlobalLayout/GlobalLayout.tsx","pages/MainPage/MainPage.tsx","hooks/queries/useReviews.ts","pages/RedirectingPage/RedirectingPage.tsx","hooks/queries/useReview.ts","hooks/useAuthenticatedMutation.ts","api/like.ts","api/data/grade.ts","pages/ReviewPageRead/ReviewPageRead.tsx","hooks/queries/useLike.ts","hooks/queries/useGrade.ts","components/guards/AuthenticatedGuard.tsx","pages/MePage/MePage.tsx","hooks/queries/useDeleteReview.ts","api/categories.ts","hooks/queries/useCategories.ts","pages/ReviewPageEdit/ReviewPageEdit.tsx","hooks/queries/useUpdateReview.ts","pages/ReviewPageCreate/ReviewPageCreate.tsx","hooks/queries/useCreateReview.ts","hooks/queries/useSearchReviews.ts","pages/SearchResult/SearchResult.tsx","routes.tsx","components/App.tsx","index.tsx"],"names":["ApiErrorType","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Page","className","title","onClick","children","Helmet","baseUrl","TokenContext","React","createContext","token","undefined","setToken","useToken","useContext","TokenProvider","ContextProvider","Provider","savedToken","useMemo","localStorage","getItem","useState","setTokenState","useCallback","setItem","removeItem","ctx","queryClient","useQueryClient","useEffect","clear","value","Guard","visible","redirectUrl","to","NotAuthenticatedGuard","cnSignInPage","cn","SignInPage","classname","Container","Row","Col","md","span","offset","Card","Header","Text","Button","href","variant","QueryKey","ApiError","type","msg","Error","useAuthenticatedQuery","key","fn","options","useQuery","retry","onError","err","NEED_AUTH","QueryClient","checkTypesByKeys","object","keys","keyType","Array","isArray","some","t","Object","isArrayOf","typeGuard","every","isString","v","isReview","review","id","author","tittle","content","grade","categories","likesCount","usersGradesAvg","tagsNames","imagesUrls","userBasicInfo","username","provider","getReviews","a","axios","get","headers","data","isAxiosError","response","status","typed","updateReview","formData","FormData","append","toString","forEach","category","tagName","images","image","name","put","createReview","post","deleteReview","reviewId","delete","getMe","user","reviews","useMe","ME","staleTime","Infinity","me","isLoading","cnGlobalLayout","GlobalLayout","history","useHistory","text","useParams","onMeClick","push","onAuthButtonClick","onMainButtonClick","onSubmit","event","preventDefault","elements","currentTarget","namedItem","resetQueries","FOUND_REVIEWS","encodeURIComponent","Form","Group","controlId","Label","Control","defaultValue","cnMainPage","MainPage","REVIEWS","useReviews","onOpenButtonClick","Table","map","RedirectingPage","location","useLocation","URLSearchParams","search","useReview","mode","REVIEW","markdown","params","getReview","useAuthenticatedMutation","mutation","like","addGrade","cnReviewPage","ReviewPageRead","likeReview","authenticatedLike","result","setQueryData","useLike","onLikeButtonClick","gradeReview","authenticatedGrade","useGrade","onGradeButtonClick","dangerouslySetInnerHTML","__html","length","Carousel","url","Item","style","width","height","src","alt","join","active","Fragment","AuthenticatedGuard","cnMePage","MePage","onEditButtonClick","onReadButtonClick","authenticatedDeleteReview","getQueryData","filter","r","useDeleteReview","onDeleteButtonClick","onCreateButtonClick","sm","getCategories","useCategories","CATEGORIES","ReviewPageEdit","authenticatedUpdateReview","useUpdateReview","Number","split","values","checkbox","checked","Boolean","from","files","updatedReview","Select","n","as","rows","Check","label","inline","defaultChecked","includes","multiple","accept","ReviewPageCreate","authenticatedCreateReview","useCreateReview","newReview","useSearchReviews","searchReview","cnSearchResult","SearchResult","routes","path","exact","App","client","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6e3e0263.chunk.js","sourcesContent":["\nexport enum ApiErrorType {\n    NEED_AUTH = 'необходима аутентификация',\n}\n\nexport class ApiError extends Error {\n\n    private constructor(\n        public readonly type: ApiErrorType | undefined,\n        public readonly msg: string,\n    ) {\n        super();\n    }\n\n    public static typed(type: ApiErrorType): ApiError {\n        return new ApiError(type, type);\n    }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\n\nexport interface PageProps {\n    className?: string;\n    title?: string;\n\n    onClick?: React.MouseEventHandler;\n}\n\nexport const Page: React.FC<PageProps> = ({ className, title, onClick, children }) => {\n    return (\n        <div onClick={onClick} className={`Page ${className ?? ''}`}>\n            <Helmet>\n                <title>\n                    {title ? (\n                        `Reviews - ${title}`\n                    ) : (\n                        'Reviews'\n                    )}\n                </title>\n            </Helmet>\n\n            {children}\n        </div>\n    );\n};","// export const baseUrl = 'http://localhost:8080';\nexport const baseUrl = '';\n","import React, { useCallback, useContext, useEffect, useMemo, useState } from 'react';\nimport { useQueryClient } from 'react-query';\n\n\nexport type TokenType = string | undefined;\n\nexport interface TokenContextType {\n    token: TokenType;\n    setToken: (token: TokenType) => void;\n}\n\nexport const TokenContext = React.createContext<TokenContextType>({\n    token: undefined,\n    setToken: () => {},\n});\n\nexport const useToken = () => useContext(TokenContext);\n\nexport const TokenProvider: React.FC = ({ children }) => {\n    const ContextProvider = TokenContext.Provider;\n\n    const savedToken = useMemo(() => localStorage.getItem('token') || undefined, []);\n    const [token, setTokenState] = useState<TokenType>(savedToken);\n\n    const setToken = useCallback((token: TokenType) => {\n        if (token) {\n            localStorage.setItem('token', token);\n        } else {\n            localStorage.removeItem('token');\n        }\n\n        setTokenState(token);\n    }, []);\n\n    const ctx = useMemo(() => ({ token, setToken }), [token, setToken]);\n\n    const queryClient = useQueryClient();\n    useEffect(() => {\n        if (token === undefined) {\n            queryClient.clear();\n        }\n    }, [queryClient, token]);\n\n    return (\n        <ContextProvider value={ctx}>\n            {children}\n        </ContextProvider>\n    );\n};\n","import React from 'react';\nimport { Redirect } from 'react-router-dom';\n\n\nexport interface GuardProps {\n    visible: boolean;\n    redirectUrl?: string;\n}\n\nexport const Guard: React.FC<GuardProps> = ({ visible, redirectUrl, children }) => {\n    if (visible) {\n        return <>{children}</>;\n    }\n\n    if (redirectUrl !== undefined) {\n        return <Redirect to={redirectUrl} />;\n    }\n\n    return null;\n};","import React from 'react';\n\nimport { useToken } from '../../token';\nimport { Guard } from '../Guard';\n\n\nexport interface NotAuthenticatedGuardProps {\n    redirectUrl?: string;\n}\n\nexport const NotAuthenticatedGuard: React.FC<NotAuthenticatedGuardProps> = ({ redirectUrl, children }) => {\n    const { token } = useToken();\n\n    return (\n        <Guard visible={token === undefined} redirectUrl={redirectUrl}>\n            {children}\n        </Guard>\n    );\n};","import React from 'react';\n\nimport { Button, Card, Col, Container, Row } from 'react-bootstrap';\nimport { BsFacebook, BsGithub, BsGoogle } from 'react-icons/all';\nimport { cn } from '@bem-react/classname';\n\nimport { Page } from '../../components/Page';\n\nimport './SignInPage.css';\nimport { baseUrl } from '../../config';\nimport { NotAuthenticatedGuard } from '../../components/guards/NotAuthenticatedGuard';\n\nexport interface SignInPageProps {\n    classname?: string;\n}\n\nconst cnSignInPage = cn('SignInPage');\n\nexport const SignInPage: React.FC<SignInPageProps> = ({ classname }) => {\n\n    return (\n        <NotAuthenticatedGuard redirectUrl=\"/\">\n            <Page className={cnSignInPage(null, [classname])} title=\"Sign in\">\n                <Container>\n                    <Row className=\"d-flex align-items-center\">\n                        <Col md={{ span: 4, offset: 4 }}>\n                            <Card>\n                                <Card.Header>Sign in with</Card.Header>\n                                <Card.Text className=\"d-grid gap-2 p-2\">\n                                    <Button href={`${baseUrl}/oauth2/authorization/github`} variant=\"outline-dark\"><span\n                                        className=\"align-middle\">GitHub</span> <BsGithub/></Button>\n                                    <Button href={`${baseUrl}/oauth2/authorization/facebook`}\n                                            variant=\"outline-dark\"><span\n                                        className=\"align-middle\">Facebook</span><BsFacebook/></Button>\n                                    <Button href={`${baseUrl}/oauth2/authorization/google`} variant=\"outline-dark\"><span\n                                        className=\"align-middle\">Google</span> <BsGoogle/></Button>\n                                </Card.Text>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </Page>\n        </NotAuthenticatedGuard>\n    );\n};","import { QueryClient } from 'react-query';\n\n\nexport enum QueryKey {\n    ME = 'me',\n    REVIEW = 'review',\n    REVIEWS = 'reviews',\n    CATEGORIES = 'categories',\n    FOUND_REVIEWS = 'found_reviews',\n}\n\nexport const queryClient = new QueryClient();","import { UseQueryOptions, UseQueryResult } from 'react-query/types/react/types';\nimport { QueryFunction, QueryKey, useQuery } from 'react-query';\n\nimport { ApiError, ApiErrorType } from '../api/ApiError';\nimport { useToken } from '../token';\n\n\nexport const useAuthenticatedQuery = <TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    key: TQueryKey,\n    fn: (token: string | undefined) => QueryFunction<TQueryFnData, TQueryKey>,\n    options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey> = {},\n): UseQueryResult<TData, TError> => {\n    const { token, setToken } = useToken();\n\n    return useQuery(key, fn(token), {\n        retry: false,\n\n        ...options,\n\n        onError: err => {\n            if (err instanceof ApiError && err.type === ApiErrorType.NEED_AUTH) {\n                setToken(undefined);\n            }\n\n            if (options.onError) {\n                options.onError(err);\n            }\n        },\n    });\n};","\nexport function checkTypesByKeys<K extends Record<string, string | string[] | undefined>>(object: object, keys: K)\n    : object is { [K1 in keyof K]: unknown } {\n\n    for (let key of Object.keys(keys)) {\n        if (!(key in object)) {\n            return false;\n        }\n\n        const keyType = keys[key];\n        if (!keyType) {\n            continue;\n        }\n\n        const types = Array.isArray(keyType) ? keyType : [keyType];\n        if (!types.some(t => typeof (object as Record<string, unknown>)[key] === t)) {\n            return false;\n        }\n    }\n\n    return true;\n}","import { checkTypesByKeys } from '../../utils/checkTypesByKeys';\n\nexport interface UserBasicInfo {\n    id: number;\n    username: string;\n    provider: string;\n}\n\nexport const isUserBasicInfo = (userBasicInfo: unknown): userBasicInfo is UserBasicInfo => {\n    if (typeof userBasicInfo !== 'object' || userBasicInfo === null) {\n        return false;\n    }\n\n    return checkTypesByKeys(userBasicInfo, {\n        id: 'number',\n        username: 'string',\n        provider: 'string',\n    });\n};\n","\nexport const isArrayOf = <T>(value: unknown, typeGuard: (value: unknown) => value is T): value is T[] => {\n    if (!Array.isArray(value)) {\n        return false;\n    }\n\n    return value.every(typeGuard);\n}","\nexport const isString = (v: unknown): v is string => typeof v === 'string';\n","import { isUserBasicInfo, UserBasicInfo } from './UserBasicInfo';\nimport { checkTypesByKeys } from '../../utils/checkTypesByKeys';\nimport { isArrayOf } from '../../utils/isArrayOf';\nimport { isString } from '../../utils/isString';\n\nexport interface Review {\n    id: number;\n    author: UserBasicInfo;\n    tittle: string;\n    content: string;\n    grade: number;\n    categories: string[];\n    likesCount: number;\n    usersGradesAvg: number;\n    tagsNames: string[];\n    imagesUrls: string[];\n}\n\nexport interface UploadingReview {\n    id: number;\n    tittle: string;\n    content: string;\n    grade: number;\n    categories: string[];\n    tagsNames: string[];\n    images: File[];\n}\n\nexport interface NewReview {\n    tittle: string;\n    content: string;\n    grade: number;\n    categories: string[];\n    tagsNames: string[];\n    images: File[];\n}\n\nexport const isReview = (review: unknown): review is Review => {\n\n    if (typeof review !== 'object' || review === null) {\n        return false;\n    }\n\n    if (!checkTypesByKeys(review, {\n        id: 'number',\n        author: 'object',\n        tittle: 'string',\n        content: 'string',\n        grade: 'number',\n        categories: 'object',\n        likesCount: 'number',\n        usersGradesAvg: ['object', 'number'],\n        tagsNames: 'object',\n        imagesUrls: 'object',\n    })) {\n        return false;\n    }\n\n    if (review.usersGradesAvg !== null && (typeof review.usersGradesAvg !== 'number')) {\n        return false;\n    }\n\n    if (!isArrayOf(review.categories, isString)) {\n        return false;\n    }\n\n    if (!isArrayOf(review.tagsNames, isString)) {\n        return false;\n    }\n\n    if (!isArrayOf(review.imagesUrls, isString)) {\n        return false;\n    }\n\n    if (!isUserBasicInfo(review.author)) {\n        return false;\n    }\n\n    return true;\n}","import { isReview, NewReview, Review, UploadingReview } from './data/Review';\nimport axios from 'axios';\nimport { baseUrl } from '../config';\nimport { ApiError, ApiErrorType } from './ApiError';\nimport { isArrayOf } from '../utils/isArrayOf';\n\nexport const getReview = (reviewId: number, markdown: boolean) => (token: string | undefined) => async (): Promise<Review | undefined> => {\n    if (!token) {\n        return;\n    }\n\n    try {\n        const { data } = await axios.get(`${baseUrl}/api/reviews/${reviewId}`,\n            { headers: { 'Authorization': `Bearer ${token}` }, params: { 'markdown': markdown} });\n\n        if (isReview(data)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n\n    throw new Error();\n};\n\nexport const getReviews = (token: string | undefined) => async (): Promise<Review[] | undefined> => {\n    if(!token) {\n        return;\n    }\n\n    try {\n        const { data } = await axios.get(`${baseUrl}/api/reviews`,\n            {headers: { 'Authorization': `Bearer ${token}` },});\n\n        if (isArrayOf(data, isReview)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n\n    throw new Error();\n}\n\nexport const updateReview = (token: string | undefined) => async (review: UploadingReview): Promise<Review | undefined> => {\n    if(!token) {\n        return;\n    }\n\n    try {\n        const formData = new FormData();\n\n        formData.append('id', review.id.toString());\n        formData.append('tittle', review.tittle);\n        formData.append('content', review.content);\n        formData.append('grade', review.grade.toString());\n\n        review.categories.forEach(category => formData.append('categories', category));\n        review.tagsNames.forEach(tagName => formData.append('tagsNames', tagName));\n        review.images.forEach(image => formData.append('images', image, image.name));\n\n        const { data } = await axios.put(\n            `${baseUrl}/api/reviews/${review.id}`,\n            formData,\n            { headers: { 'Authorization': `Bearer ${token}` } }\n        );\n\n        if (isReview(data)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n}\n\nexport const createReview = (token: string | undefined) => async (review: NewReview): Promise<Review | undefined> => {\n    if(!token) {\n        return;\n    }\n\n    try {\n        const formData = new FormData();\n\n        formData.append('tittle', review.tittle);\n        formData.append('content', review.content);\n        formData.append('grade', review.grade.toString());\n\n        review.categories.forEach(category => formData.append('categories', category));\n        review.tagsNames.forEach(tagName => formData.append('tagsNames', tagName));\n        review.images.forEach(image => formData.append('images', image, image.name));\n\n        const { data } = await axios.post(\n            `${baseUrl}/api/reviews`,\n            formData,\n            { headers: { 'Authorization': `Bearer ${token}` } }\n        );\n\n        if (isReview(data)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n}\n\nexport const deleteReview = (token: string | undefined) => async (reviewId: number): Promise<number | undefined> => {\n    if(!token) {\n        return;\n    }\n\n    try {\n        const { data } = await axios.delete(\n            `${baseUrl}/api/reviews/${reviewId}`,\n            { headers: { 'Authorization': `Bearer ${token}` } }\n        );\n\n        if (typeof data === 'number') {\n            return data;\n        }\n\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n}\n\nexport const searchReview = (text: string) => async (): Promise<Review[] | undefined> => {\n\n    const { data } = await axios.get(\n        `${baseUrl}/api/reviews/search`,\n        { params: { 'text': text } }\n    );\n\n    if (isArrayOf(data, isReview)) {\n        return data;\n    }\n}","import { isUser, User } from './data/User';\nimport axios from 'axios';\nimport { baseUrl } from '../config';\nimport { ApiError, ApiErrorType } from './ApiError';\n\nexport const getMe = (token: string | undefined) => async (): Promise<User | undefined> => {\n    if (!token) {\n        return;\n    }\n\n    try {\n        const { data } = await axios.get(`${baseUrl}/api/users/me`, { headers: { 'Authorization': `Bearer ${token}` } });\n\n        if (isUser(data)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n\n    throw new Error();\n};","import { isReview, Review } from './Review';\nimport { checkTypesByKeys } from '../../utils/checkTypesByKeys';\nimport { isArrayOf } from '../../utils/isArrayOf';\n\nexport interface User {\n    id: number;\n    username: string;\n    provider: string;\n    reviews: Review[];\n}\n\nexport const isUser = (user: unknown): user is User => {\n    if (typeof user !== 'object' || user === null) {\n        return false;\n    }\n\n    if (!checkTypesByKeys(user, {\n        id: 'number',\n        username: 'string',\n        provider: 'string',\n        reviews: 'object',\n    })) {\n        return false;\n    }\n\n    if (!isArrayOf(user.reviews, isReview)) {\n        return false;\n    }\n\n    return true;\n};","import { User } from '../../api/data/User';\nimport { useAuthenticatedQuery } from '../useAuthenticatedQuery';\nimport { QueryKey } from '../../queryClient';\nimport { getMe } from '../../api/user';\n\nexport interface UseMeResult {\n    me: User | undefined;\n    isLoading: boolean;\n}\n\nexport const useMe = (): UseMeResult => {\n\n    const {data: me, isLoading} = useAuthenticatedQuery(QueryKey.ME, getMe, {\n        staleTime: Infinity,\n    });\n\n    return { me, isLoading }\n}\n\n","import { cn } from '@bem-react/classname';\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\nimport React, { FormEvent, useCallback } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useQueryClient } from 'react-query';\nimport { QueryKey } from '../../queryClient';\nimport { useMe } from '../../hooks/queries/useMe';\n\nimport './GlobalLayout.css';\n\nexport interface GlobalLayoutProps {\n    className?: string;\n}\n\nexport interface SearchParams {\n    text?: string;\n}\n\nconst cnGlobalLayout = cn('GlobalLayout');\n\nexport const GlobalLayout: React.FC<GlobalLayoutProps> = ({ className, children }) => {\n\n    const history = useHistory();\n\n    const { text } = useParams<SearchParams>();\n    const queryClient = useQueryClient();\n\n    const { me } = useMe();\n\n    const onMeClick = useCallback(() => {\n        history.push(\"/me\");\n    },[history])\n\n    const onAuthButtonClick = useCallback(() => {\n        history.push(\"/signIn\");\n    },[history])\n\n    const onMainButtonClick = useCallback(() => {\n        history.push(\"/\");\n    },[history])\n\n    const onSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const { elements } = event.currentTarget;\n\n        const text = (elements.namedItem('searchingText') as HTMLInputElement).value;\n\n        await queryClient.resetQueries(QueryKey.FOUND_REVIEWS);\n\n        history.push(`/reviews/search/result/${encodeURIComponent(text)}`);\n\n    }, [history, queryClient])\n\n    return (\n        <Container className={cnGlobalLayout(null, [className])}>\n\n            <Row className=\"align-items-baseline\">\n                <Col className={cnGlobalLayout('Top')} md={{span: 2, offset: 0}} onClick={onMainButtonClick}>\n                    <b>Reviews</b>\n                </Col>\n                {me ? (\n                    <Col className={cnGlobalLayout('Top')} md={{span: 2, offset: 8}} onClick={onMeClick}>\n                        {me.username}\n                    </Col>\n                ) : (\n                    <Col className={cnGlobalLayout('Top')} md={{span: 1, offset: 9}} onClick={onMeClick}>\n                        <div onClick={onAuthButtonClick}>authenticate</div>\n                    </Col>\n                )}\n            </Row>\n\n            <Row>\n                <Form onSubmit={onSubmit}>\n                    <Form.Group className=\"mb-3\" controlId='searchingText'>\n                        <Form.Label>search reviews</Form.Label>\n                        <Row>\n                            <Col>\n                                <Form.Control type=\"text\" defaultValue={text}/>\n                            </Col>\n                            <Col md={1}>\n                                <Button variant=\"dark\" type=\"submit\">search</Button>\n                            </Col>\n                        </Row>\n                    </Form.Group>\n                </Form>\n            </Row>\n\n            <div>\n                {children}\n            </div>\n\n        </Container>\n    );\n};","import React, { useCallback } from 'react';\n\nimport { Page } from '../../components/Page';\nimport { Button, Container, Table } from 'react-bootstrap';\nimport { cn } from '@bem-react/classname';\n\nimport './MainPage.css';\nimport { useReviews } from '../../hooks/queries/useReviews';\nimport { useHistory } from 'react-router-dom';\nimport { AiOutlineLike, AiOutlineStar } from 'react-icons/all';\nimport { GlobalLayout } from '../../layouts/GlobalLayout/GlobalLayout';\n\n\nexport interface MainPageProps {\n    classname?: string;\n}\n\nconst cnMainPage = cn('MainPage');\n\nexport const MainPage: React.FC<MainPageProps> = ({ classname }) => {\n\n    const { reviews } = useReviews();\n\n    const history = useHistory();\n    const onOpenButtonClick = useCallback((reviewId: number) => {\n        history.push(`/reviews/${reviewId}/read`)\n    },[history])\n\n    return (\n        <Page className={cnMainPage(null, [classname])} title={''}>\n            <GlobalLayout>\n                <Container>\n                    <Table>\n                        <thead>\n                            <tr>\n                                <th className={cnMainPage('ReviewTitleCol')}>Title</th>\n                                <th className={cnMainPage('ReviewLikesCol')}>Likes</th>\n                                <th className={cnMainPage('ReviewGradesCol')}>Users` grade avg</th>\n                                <th className={cnMainPage('ReviewOpenCol')}/>\n                            </tr>\n                        </thead>\n\n                        <tbody>\n                        { reviews ? (\n                            reviews?.map((review) => (\n                                <tr key = {review.id}>\n                                    <th className={cnMainPage('ReviewTitleCol')}>\n                                        {review.tittle}\n                                    </th>\n                                    <th className={cnMainPage('ReviewLikesCol')}>\n                                        <AiOutlineLike/> {review.likesCount}\n                                    </th>\n                                    <th className={cnMainPage('ReviewGradesCol')}>\n                                        <AiOutlineStar/> {review.usersGradesAvg}\n                                    </th>\n                                    <th className={cnMainPage('ReviewOpenCol')}>\n                                        <Button variant=\"dark\" onClick={() => onOpenButtonClick(review.id)}>\n                                            open\n                                        </Button>\n                                    </th>\n                                </tr>\n                            ))): (\n                            <>\n                                No reviews\n                            </>\n                        )}\n                        </tbody>\n                    </Table>\n                </Container>\n            </GlobalLayout>\n        </Page>\n    );\n};","import { Review } from '../../api/data/Review';\nimport { useAuthenticatedQuery } from '../useAuthenticatedQuery';\nimport { queryClient, QueryKey } from '../../queryClient';\nimport { getReviews } from '../../api/review';\n\nexport interface useGetReviewsResult {\n    reviews: Review[] | undefined;\n    isLoading: boolean;\n}\n\nexport const useReviews = (): useGetReviewsResult => {\n\n    const { data: reviews, isLoading} = useAuthenticatedQuery(QueryKey.REVIEWS, getReviews, {\n        staleTime: Infinity,\n    })\n\n    return { reviews, isLoading };\n}","import React, { useEffect } from 'react';\nimport { Page } from '../../components/Page';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useToken } from '../../token';\nimport { NotAuthenticatedGuard } from '../../components/guards/NotAuthenticatedGuard';\n\nexport interface RedirectingPageProps {\n    classname?: string;\n}\n\nexport const RedirectingPage: React.FC<RedirectingPageProps> = ({ classname }) => {\n    const { setToken } = useToken();\n    const location = useLocation();\n\n    useEffect(() => {\n        const queryParams = new URLSearchParams(location.search);\n        const token = queryParams.get('token');\n\n        if (token) {\n            setToken(token);\n        }\n    }, [location.search, setToken]);\n\n    return (\n        <NotAuthenticatedGuard redirectUrl=\"/\">\n            <Page>\n                Redirecting...\n            </Page>\n        </NotAuthenticatedGuard>\n    );\n};","import { Review } from '../../api/data/Review';\nimport { getReview } from '../../api/review';\nimport { useAuthenticatedQuery } from '../useAuthenticatedQuery';\nimport { QueryKey } from '../../queryClient';\n\nexport interface useGetReviewResult {\n    review: Review | undefined;\n    isLoading: boolean;\n}\n\nexport const useReview = (reviewId: string, mode: string): useGetReviewResult => {\n\n    const {data: review, isLoading} = useAuthenticatedQuery([QueryKey.REVIEW, reviewId, mode], getReview(+reviewId, mode === 'edit'), {\n        staleTime: Infinity,\n    })\n\n    return { review, isLoading }\n}","import { TokenType, useToken } from '../token';\nimport { useCallback } from 'react';\nimport { ApiError, ApiErrorType } from '../api/ApiError';\n\nexport const useAuthenticatedMutation = <P extends unknown[], R extends unknown>(\n    mutation: (token: TokenType) => (...args: P) => Promise<R>\n): (...args: P) => Promise<R> => {\n    const { token, setToken } = useToken();\n\n    return useCallback(async (...args: P): Promise<R> => {\n        try {\n            return await mutation(token)(...args);\n        } catch (e) {\n            if (e instanceof ApiError && e.type === ApiErrorType.NEED_AUTH) {\n                setToken(undefined);\n            }\n\n            throw e;\n        }\n    }, [mutation, token, setToken]);\n};","import axios from 'axios';\nimport { baseUrl } from '../config';\nimport { ApiError, ApiErrorType } from './ApiError';\nimport { isReview, Review } from './data/Review';\n\nexport const like = (token: string | undefined) => async (reviewId: number): Promise<Review |undefined> => {\n    if(!token) {\n        return;\n    }\n\n    try {\n        const { data } = await axios.post(\n            `${baseUrl}/api/reviews/${reviewId}/like`,\n            null,\n            {headers: { 'Authorization': `Bearer ${token}` }}\n        );\n\n        if (isReview(data)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n}","import { isReview, Review } from './Review';\nimport axios from 'axios';\nimport { baseUrl } from '../../config';\nimport { ApiError, ApiErrorType } from '../ApiError';\n\nexport const addGrade = (token: string | undefined) => async (reviewId: number, grade: number): Promise<Review |undefined> => {\n    if(!token) {\n        return;\n    }\n\n    try {\n        const { data } = await axios.post(\n            `${baseUrl}/api/reviews/${reviewId}/grade`,\n            grade,\n            {headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' }}\n        );\n\n        if (isReview(data)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n}","import React, { useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { cn } from '@bem-react/classname';\nimport { Button, Carousel, Col, Container, Row } from 'react-bootstrap';\nimport { AiFillStar, AiOutlineLike, AiOutlineStar, ImStarHalf } from 'react-icons/all';\n\nimport { Page } from '../../components/Page';\nimport { AuthenticatedGuard } from '../../components/guards/AuthenticatedGuard';\nimport { useReview } from '../../hooks/queries/useReview';\nimport { useMe } from '../../hooks/queries/useMe';\nimport { useLike } from '../../hooks/queries/useLike';\nimport { useGrade } from '../../hooks/queries/useGrade';\n\nimport './ReviewPageRead.css';\nimport { GlobalLayout } from '../../layouts/GlobalLayout/GlobalLayout';\n\nexport interface ReviewPageReadParams {\n    reviewId: string;\n}\n\nexport interface ReviewPageReadProps {\n    className?: string\n}\n\nconst cnReviewPage = cn('ReviewPageRead');\n\nexport const ReviewPageRead: React.FC<ReviewPageReadProps> = ({ className }) => {\n    const { reviewId } = useParams<ReviewPageReadParams>();\n\n    const { me } = useMe();\n    const { review } = useReview(reviewId, 'read');\n\n    const likeReview = useLike();\n    const onLikeButtonClick = useCallback(async (reviewId) => {\n        await likeReview(reviewId);\n    },[likeReview])\n\n    const gradeReview = useGrade();\n    const onGradeButtonClick = useCallback(async (reviewId, grade) => {\n        await gradeReview(reviewId, grade);\n    }, [gradeReview]);\n\n\n    return (\n        <Page className={cnReviewPage(null, [className])} title={`Review - read`}>\n            <GlobalLayout>\n                <Container>\n                    <Row className=\"justify-content-md-center\">\n                        <h1 className=\"text-center\">{review?.tittle}</h1>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <Col className=\"text-md-center\">\n                            <h5>author: {review?.author.username}, author's grade: {review?.grade} <AiOutlineStar/></h5>\n                        </Col>\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        <div dangerouslySetInnerHTML={review?.content ? {__html: review?.content} : undefined} />\n                    </Row>\n                    <Row className=\"justify-content-md-center\">\n                        {review?.imagesUrls && review.imagesUrls.length > 0 && (\n                            <Carousel>\n                                {review.imagesUrls.map((url) => (\n                                    <Carousel.Item key={url}>\n                                        <img style={{width: '100vw', height: 'auto'}} src={`${url}`} alt=\"Failed to download\"/>\n                                    </Carousel.Item>\n                                ))}\n                            </Carousel>\n                        )}\n                    </Row>\n                    <Row>\n                        categories: {review?.categories.join(', ')}\n                    </Row>\n                    <Row>\n                        tags: {review?.tagsNames.join(', ')}\n                    </Row>\n                    <Row className=\"justify-content-between px-3\">\n                        <Col md=\"auto\">\n                            {review?.author.id !== me?.id ? (\n                                <Button variant=\"outline-dark\" onClick={() => onLikeButtonClick(review?.id)}>\n                                    <AiOutlineLike className={cnReviewPage('LikeButton', { active: true })} />\n                                    {' '}\n                                    {review?.likesCount}\n                                </Button>\n                            ) : (\n                                <>\n                                    <AiOutlineLike className={cnReviewPage('LikeButton')} />\n                                    {' '}\n                                    {review?.likesCount}\n                                </>\n                            )}\n                        </Col>\n\n                        <Col md=\"auto\">\n                            {[0, 1, 2, 3, 4].map(grade =>\n                                review?.author.id !== me?.id ? (\n                                    <Button key={grade} variant=\"outline-dark\" onClick={() => onGradeButtonClick(review?.id, grade + 1)}>\n                                        {review?.usersGradesAvg ? review.usersGradesAvg <= grade ? (\n                                            <AiOutlineStar/>\n                                        ) : review.usersGradesAvg < grade + 1 ? (\n                                            <ImStarHalf/>\n                                        ) : (\n                                            <AiFillStar/>\n                                        ) : (\n                                            <AiOutlineStar/>\n                                        )}\n                                    </Button>\n                                ) : (\n                                    <React.Fragment key={grade}>\n                                        {review?.usersGradesAvg ? review.usersGradesAvg <= grade ? (\n                                            <AiOutlineStar/>\n                                        ) : review.usersGradesAvg < grade + 1 ? (\n                                            <ImStarHalf/>\n                                        ) : (\n                                            <AiFillStar/>\n                                        ) : (\n                                            <AiOutlineStar/>\n                                        )}\n                                    </React.Fragment>\n                                )\n                            )}\n                        </Col>\n                    </Row>\n                </Container>\n            </GlobalLayout>\n        </Page>\n    )\n};\n","import { useAuthenticatedQuery } from '../useAuthenticatedQuery';\nimport { useAuthenticatedMutation } from '../useAuthenticatedMutation';\nimport { like } from '../../api/like';\nimport { useCallback } from 'react';\nimport { queryClient, QueryKey } from '../../queryClient';\nimport { useQueryClient } from 'react-query';\n\nexport const useLike = (): (reviewId: number) => void => {\n\n    const queryClient = useQueryClient();\n    const authenticatedLike = useAuthenticatedMutation(like);\n\n    return useCallback(async (reviewId) => {\n        const result = await authenticatedLike(reviewId);\n        if (result !== undefined) {\n            queryClient.setQueryData(QueryKey.REVIEW, result)\n        }\n\n    },[queryClient, authenticatedLike])\n}","import { useQueryClient } from 'react-query';\nimport { useAuthenticatedMutation } from '../useAuthenticatedMutation';\nimport { addGrade } from '../../api/data/grade';\nimport { useCallback } from 'react';\nimport { QueryKey } from '../../queryClient';\n\nexport const useGrade = (): (reviewId: number, grade: number) => void => {\n\n    const queryClient = useQueryClient();\n    const authenticatedGrade = useAuthenticatedMutation(addGrade);\n\n    return useCallback(async (reviewId, grade) => {\n        const result = await authenticatedGrade(reviewId, grade);\n        if (result !== undefined) {\n            queryClient.setQueryData(QueryKey.REVIEW, result)\n        }\n\n    },[queryClient, authenticatedGrade])\n}","import React from 'react';\n\nimport { useToken } from '../../token';\nimport { Guard } from '../Guard';\n\n\nexport interface AuthenticatedGuardProps {\n    redirectUrl?: string;\n}\n\nexport const AuthenticatedGuard: React.FC<AuthenticatedGuardProps> = ({ redirectUrl, children }) => {\n    const { token } = useToken();\n\n    return (\n        <Guard visible={token !== undefined} redirectUrl={redirectUrl}>\n            {children}\n        </Guard>\n    );\n};","import React, { useCallback } from 'react';\nimport { cn } from '@bem-react/classname';\nimport { AuthenticatedGuard } from '../../components/guards/AuthenticatedGuard';\nimport { Page } from '../../components/Page';\nimport { Button, Col, Container, Row } from 'react-bootstrap';\nimport { AiOutlineLike, AiOutlineStar } from 'react-icons/all';\nimport { useMe } from '../../hooks/queries/useMe';\nimport { useHistory } from 'react-router-dom';\nimport { useDeleteReview } from '../../hooks/queries/useDeleteReview';\nimport { GlobalLayout } from '../../layouts/GlobalLayout/GlobalLayout';\n\n\nexport interface MePageProps {\n    className?: string;\n}\n\nconst cnMePage = cn('MePage');\n\nexport const MePage: React.FC<MePageProps> = ({ className }) => {\n\n    const { me } = useMe();\n\n    const history = useHistory();\n\n    const onEditButtonClick = useCallback((reviewId: number) => {\n            history.push(`/reviews/${reviewId}/edit`);\n    },[history])\n\n    const onReadButtonClick = useCallback((reviewId: number) => {\n        history.push(`/reviews/${reviewId}/read`);\n    },[history])\n\n    const deleteReview = useDeleteReview();\n    const onDeleteButtonClick = useCallback((reviewId: number) => {\n        deleteReview(reviewId);\n    },[deleteReview])\n\n    const onCreateButtonClick = useCallback(() => {\n        history.push('/me/reviews/create');\n    },[history])\n\n    return (\n        <AuthenticatedGuard redirectUrl=\"/signIn\">\n            <Page className={cnMePage(null, [className])} title=\"Your profile\">\n                <GlobalLayout>\n                    <Container>\n                        <Row>\n                            <Col>\n                                { me?.username } ({ me?.provider })\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                Your reviews:\n                            </Col>\n                        </Row>\n                        { me?.reviews && me.reviews.length > 0 ? (\n                            me.reviews.map((review) => (\n                                <Row className=\"mb-1\" key = {review.id}>\n                                    <Col sm={7}>\n                                        {review.tittle}\n                                    </Col>\n                                    <Col>\n                                        <Button variant=\"dark\" onClick={() => onReadButtonClick(review.id)}>\n                                            read\n                                        </Button>\n                                    </Col>\n                                    <Col>\n                                        <Button variant=\"dark\" onClick={() => onEditButtonClick(review.id)}>\n                                            edit\n                                        </Button>\n                                    </Col>\n                                    <Col>\n                                        <Button variant=\"dark\" onClick={() => onDeleteButtonClick(review.id)}>\n                                            delete\n                                        </Button>\n                                    </Col>\n                                    <Col sm={1}>\n                                        <AiOutlineLike/> {review.likesCount}\n                                    </Col>\n                                    <Col sm={1}>\n                                        <AiOutlineStar/> {review.usersGradesAvg}\n                                    </Col>\n                                </Row>\n                            ))\n                        ) : (\n                            <Row>\n                                <Col>\n                                    You didn`t upload reviews yet\n                                </Col>\n                            </Row>\n                        )}\n                        <Row>\n                            <Button variant=\"outline-dark\" onClick={onCreateButtonClick}>\n                                Create new review\n                            </Button>\n                        </Row>\n                    </Container>\n                </GlobalLayout>\n            </Page>\n        </AuthenticatedGuard>\n    )\n}","import { useQueryClient } from 'react-query';\nimport { useAuthenticatedMutation } from '../useAuthenticatedMutation';\nimport { deleteReview } from '../../api/review';\nimport { useCallback } from 'react';\nimport { QueryKey } from '../../queryClient';\nimport { User } from '../../api/data/User';\n\nexport const useDeleteReview = (): (reviewId: number) => void => {\n    const queryClient = useQueryClient();\n    const authenticatedDeleteReview = useAuthenticatedMutation(deleteReview);\n\n    return useCallback(async (reviewId) => {\n        const result: number | undefined = await authenticatedDeleteReview(reviewId);\n\n        if (result !== undefined) {\n            const me: User | undefined = queryClient.getQueryData(QueryKey.ME);\n\n            if (me) {\n                queryClient.setQueryData(QueryKey.ME, {\n                    ...me,\n                    reviews: me.reviews.filter(r => r.id !== result),\n                });\n            }\n        }\n\n    }, [queryClient, authenticatedDeleteReview]);\n}","import { isUser, User } from './data/User';\nimport axios from 'axios';\nimport { baseUrl } from '../config';\nimport { ApiError, ApiErrorType } from './ApiError';\nimport { isArrayOf } from '../utils/isArrayOf';\nimport { isString } from '../utils/isString';\n\nexport const getCategories = (token: string | undefined) => async (): Promise<string[] | undefined> => {\n    if (!token) {\n        return;\n    }\n\n    try {\n        const { data } = await axios.get(`${baseUrl}/api/reviews/categories`, { headers: { 'Authorization': `Bearer ${token}` } });\n\n        if (isArrayOf(data, isString)) {\n            return data;\n        }\n    } catch (e) {\n        if (axios.isAxiosError(e)) {\n            if (e.response?.status === 403) {\n                throw ApiError.typed(ApiErrorType.NEED_AUTH);\n            }\n\n            throw e;\n        }\n    }\n\n    throw new Error();\n};","import { useAuthenticatedQuery } from '../useAuthenticatedQuery';\nimport { QueryKey } from '../../queryClient';\nimport { getCategories } from '../../api/categories';\n\nexport interface UseCategoriesResult {\n    categories: string[] | undefined;\n    isLoading: boolean;\n}\n\nexport const useCategories = (): UseCategoriesResult => {\n\n    const {data: categories, isLoading} = useAuthenticatedQuery(QueryKey.CATEGORIES, getCategories, {\n        staleTime: Infinity,\n    });\n\n    return { categories, isLoading }\n}\n","import { cn } from '@bem-react/classname';\nimport React, { FormEvent, useCallback } from 'react';\nimport { Page } from '../../components/Page';\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\nimport { AuthenticatedGuard } from '../../components/guards/AuthenticatedGuard';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useMe } from '../../hooks/queries/useMe';\nimport { useReview } from '../../hooks/queries/useReview';\nimport { useCategories } from '../../hooks/queries/useCategories';\nimport { useUpdateReview } from '../../hooks/queries/useUpdateReview';\n\nexport interface ReviewPageEditParams {\n    reviewId: string;\n}\n\nexport interface ReviewPageEditProps {\n    className?: string\n}\n\nconst cnReviewPage = cn('ReviewPage')\n\nexport const ReviewPageEdit: React.FC<ReviewPageEditProps> = ({ className }) => {\n    const { reviewId } = useParams<ReviewPageEditParams>();\n\n    const history = useHistory();\n\n    const { me } = useMe();\n    const { review } = useReview(reviewId, 'edit');\n    const { categories } = useCategories();\n    const updateReview = useUpdateReview();\n\n    const onSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        if (!review) {\n            return;\n        }\n\n        const { elements } = event.currentTarget;\n\n        const tittle = (elements.namedItem('tittle') as HTMLInputElement).value;\n        const grade = Number((elements.namedItem('grade') as HTMLSelectElement).value);\n        const content = (elements.namedItem('content') as HTMLTextAreaElement).value;\n        const tagsNames = (elements.namedItem('tagsNames') as HTMLInputElement).value.split(/\\s*,\\s*/g);\n        // @ts-ignore\n        const categories = [...(elements.namedItem('categories') as RadioNodeList).values()]\n            .map((checkbox: HTMLInputElement) => checkbox.checked && checkbox.value)\n            .filter(Boolean) as string[];\n        // @ts-ignore\n        const images = Array.from((elements.namedItem('images') as HTMLInputElement).files);\n\n        const updatedReview = await updateReview({\n            id: review.id,\n            tittle,\n            grade,\n            content,\n            tagsNames,\n            categories,\n            images,\n        });\n\n        if (updatedReview) {\n            history.push(`/reviews/${updatedReview?.id}/read`);\n        }\n\n    }, [history, review, updateReview]);\n\n    return (\n        <AuthenticatedGuard redirectUrl={\"/signIn\"}>\n            <Page className={cnReviewPage(null, [className])} title={`Review - edit`}>\n                <Container>\n                    {review?.author.id === me?.id ? (\n                        <Form onSubmit={onSubmit}>\n                            <Form.Group className=\"mb-3\" controlId=\"tittle\">\n                                <Form.Label>Tittle</Form.Label>\n                                <Form.Control name=\"tittle\" type=\"text\" defaultValue={review?.tittle}/>\n                            </Form.Group>\n                            <Form.Group className=\"mb-3\" controlId=\"grade\">\n                                <Form.Label>Your grade</Form.Label>\n                                <Form.Select name=\"grade\">\n                                    <option>{review?.grade}</option>\n                                    {review?.grade && [1,2,3,4,5].map(n =>\n                                        n !== review?.grade && (\n                                            <option value={n}>{n}</option>\n                                        ))}\n                                </Form.Select>\n                            </Form.Group>\n                            <Form.Group className=\"mb-3\" controlId=\"content\">\n                                <Form.Label>Content</Form.Label>\n                                <Form.Control name=\"content\" as=\"textarea\" rows={20} defaultValue={review?.content}/>\n                            </Form.Group>\n                            <Form.Group className=\"mb-3\" controlId=\"tagsNames\">\n                                <Form.Label>Input tags, separated by comma</Form.Label>\n                                <Form.Control name=\"tags\" type=\"text\" defaultValue={review?.tagsNames.join(', ')}/>\n                            </Form.Group>\n                            <Form.Group className=\"mb-3\" controlId=\"categories\">\n                                Categories: {categories?.map(category =>\n                                <Form.Check\n                                    key={category}\n                                    name=\"categories\"\n                                    id={category}\n                                    label={category}\n                                    type=\"checkbox\"\n                                    inline\n                                    defaultChecked={review?.categories.includes(category)}\n                                    value={category}\n                                />\n                            )}\n                            </Form.Group>\n                            <Form.Group className=\"mb-3\" controlId=\"images\">\n                                <Form.Label>Images. Supported formats: JPG, PNG, GIF, BMP, ICO, SVG</Form.Label>\n                                <Form.Control name=\"images\" type=\"file\" multiple accept=\"image/png\" />\n                            </Form.Group>\n                            <Button variant=\"dark\" type=\"submit\">Apply changes</Button>\n                        </Form>\n                    ) : (\n                        <Row>\n                            <Col>\n                                You can edit only your reviews\n                            </Col>\n                        </Row>\n                    )}\n                </Container>\n            </Page>\n        </AuthenticatedGuard>\n    )\n}","import { useAuthenticatedMutation } from '../useAuthenticatedMutation';\nimport { useCallback } from 'react';\nimport { QueryKey } from '../../queryClient';\nimport { useQueryClient } from 'react-query';\nimport { UploadingReview } from '../../api/data/Review';\nimport { updateReview } from '../../api/review';\nimport { User } from '../../api/data/User';\n\nexport const useUpdateReview = () => {\n    const queryClient = useQueryClient();\n    const authenticatedUpdateReview = useAuthenticatedMutation(updateReview);\n\n    return useCallback(async (review) => {\n        const result = await authenticatedUpdateReview(review);\n\n        if (result !== undefined) {\n            queryClient.setQueryData(QueryKey.REVIEW, result);\n\n            const me: User | undefined = queryClient.getQueryData(QueryKey.ME);\n\n            if (me) {\n                queryClient.setQueryData(QueryKey.ME, {\n                    ...me,\n                    reviews: me.reviews.map(r => {\n                        return r.id === result.id ? result : r;\n                    }),\n                });\n            }\n        }\n\n        return result;\n\n    }, [queryClient, authenticatedUpdateReview])\n}","import { cn } from '@bem-react/classname';\nimport React, { FormEvent, useCallback } from 'react';\nimport { useCategories } from '../../hooks/queries/useCategories';\nimport { AuthenticatedGuard } from '../../components/guards/AuthenticatedGuard';\nimport { Page } from '../../components/Page';\nimport { Button, Container, Form } from 'react-bootstrap';\nimport { useCreateReview } from '../../hooks/queries/useCreateReview';\nimport { useHistory } from 'react-router-dom';\n\nexport interface ReviewPageCreateProps {\n    className?: string\n}\n\nconst cnReviewPage = cn('ReviewPage')\n\nexport const ReviewPageCreate: React.FC<ReviewPageCreateProps> = ({ className }) => {\n\n    const history = useHistory();\n\n    const { categories } = useCategories();\n    const createReview = useCreateReview();\n\n\n    const onSubmit = useCallback(async (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const { elements } = event.currentTarget;\n\n        const tittle = (elements.namedItem('tittle') as HTMLInputElement).value;\n        const grade = Number((elements.namedItem('grade') as HTMLSelectElement).value);\n        const content = (elements.namedItem('content') as HTMLTextAreaElement).value;\n        const tagsNames = (elements.namedItem('tagsNames') as HTMLInputElement).value.split(/\\s*,\\s*/g);\n        // @ts-ignore\n        const categories = [...(elements.namedItem('categories') as RadioNodeList).values()]\n            .map((checkbox: HTMLInputElement) => checkbox.checked && checkbox.value)\n            .filter(Boolean) as string[];\n        // @ts-ignore\n        const images = Array.from((elements.namedItem('images') as HTMLInputElement).files);\n\n        const newReview = await createReview({\n            tittle,\n            grade,\n            content,\n            tagsNames,\n            categories,\n            images,\n        });\n\n        if (newReview) {\n            history.push(`/reviews/${newReview?.id}/read`);\n        }\n    }, [createReview, history]);\n\n    return (\n        <AuthenticatedGuard redirectUrl={\"/signIn\"}>\n            <Page className={cnReviewPage(null, [className])} title={`Review - edit`}>\n                <Container>\n                    <Form onSubmit={onSubmit}>\n                        <Form.Group className=\"mb-3\" controlId=\"tittle\">\n                            <Form.Label>Tittle</Form.Label>\n                            <Form.Control name=\"tittle\" type=\"text\"/>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"grade\">\n                            <Form.Label>Your grade</Form.Label>\n                            <Form.Select name=\"grade\">\n                                {[1,2,3,4,5].map(n => (\n                                    <option value={n}>{n}</option>\n                                ))}\n                            </Form.Select>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"content\">\n                            <Form.Label>Content</Form.Label>\n                            <Form.Control name=\"content\" as=\"textarea\" rows={20}/>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"tagsNames\">\n                            <Form.Label>Input tags, separated by comma</Form.Label>\n                            <Form.Control name=\"tags\" type=\"text\"/>\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"categories\">\n                            Categories: {categories?.map(category =>\n                            <Form.Check\n                                key={category}\n                                name=\"categories\"\n                                id={category}\n                                label={category}\n                                type=\"checkbox\"\n                                inline\n                                value={category}\n                            />\n                        )}\n                        </Form.Group>\n                        <Form.Group className=\"mb-3\" controlId=\"images\">\n                            <Form.Label>Images. Supported formats: JPG, PNG, GIF, BMP, ICO, SVG</Form.Label>\n                            <Form.Control name=\"images\" type=\"file\" multiple accept=\"image/png\" />\n                        </Form.Group>\n                        <Button variant=\"dark\" type=\"submit\">Create review</Button>\n                    </Form>\n                </Container>\n            </Page>\n        </AuthenticatedGuard>\n    )\n}","import { useQueryClient } from 'react-query';\nimport { useAuthenticatedMutation } from '../useAuthenticatedMutation';\nimport { createReview } from '../../api/review';\nimport { useCallback } from 'react';\nimport { QueryKey } from '../../queryClient';\nimport { User } from '../../api/data/User';\nimport { NewReview } from '../../api/data/Review';\n\nexport const useCreateReview = () => {\n    const queryClient = useQueryClient();\n    const authenticatedCreateReview = useAuthenticatedMutation(createReview);\n\n    return useCallback(async (review: NewReview) => {\n        const result = await authenticatedCreateReview(review);\n\n        if (result !== undefined) {\n            queryClient.setQueryData(QueryKey.REVIEW, result);\n\n            const me: User | undefined = queryClient.getQueryData(QueryKey.ME);\n\n            if (me) {\n                queryClient.setQueryData(QueryKey.ME, {\n                    ...me,\n                    reviews: [...me.reviews, result],\n                });\n            }\n        }\n\n        return result;\n    }, [queryClient, authenticatedCreateReview])\n}","import { Review } from '../../api/data/Review';\nimport { useQuery } from 'react-query';\nimport { QueryKey } from '../../queryClient';\nimport { searchReview } from '../../api/review';\n\nexport interface UseSearchReviewsResult {\n    reviews: Review[] | undefined;\n    isLoading: boolean;\n}\n\nexport const useSearchReviews = (text: string): UseSearchReviewsResult => {\n    const { data: reviews, isLoading } = useQuery([QueryKey.FOUND_REVIEWS, text], searchReview(text), {\n        retry: false, staleTime: Infinity\n    });\n\n    return { reviews, isLoading }\n}","import React, { useCallback, useEffect } from 'react';\nimport { Review } from '../../api/data/Review';\nimport { Button, Table } from 'react-bootstrap';\nimport { cn } from '@bem-react/classname';\nimport { AiOutlineLike, AiOutlineStar } from 'react-icons/all';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { useSearchReviews } from '../../hooks/queries/useSearchReviews';\nimport { Page } from '../../components/Page';\nimport { GlobalLayout } from '../../layouts/GlobalLayout/GlobalLayout';\n\nexport interface SearchResultProps {\n    className?: string;\n}\n\nexport interface SearchResultParams {\n    text?: string;\n}\n\nconst cnSearchResult = cn('SearchResult');\n\nexport const SearchResult: React.FC<SearchResultProps> = ({ className }) => {\n\n    const { text } = useParams<SearchResultParams>();\n    const { reviews } = useSearchReviews(text || '');\n\n    const history = useHistory();\n    const onOpenButtonClick = useCallback((reviewId: number) => {\n        history.push(`/reviews/${reviewId}/read`)\n    },[history]);\n\n    return (\n        <Page title={`Search results for \"${text}\"`}>\n            <GlobalLayout>\n                <Table>\n                    <thead>\n                        <tr>\n                            <th className={cnSearchResult('ReviewTitleCol')}>Title</th>\n                            <th className={cnSearchResult('ReviewLikesCol')}>Likes</th>\n                            <th className={cnSearchResult('ReviewGradesCol')}>Users` grade avg</th>\n                            <th className={cnSearchResult('ReviewOpenCol')}/>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {reviews ? reviews.map((review) => (\n                            <tr key = {review.id}>\n                                <th className={cnSearchResult('ReviewTitleCol')}>\n                                    {review.tittle}\n                                </th>\n                                <th className={cnSearchResult('ReviewLikesCol')}>\n                                    <AiOutlineLike/> {review.likesCount}\n                                </th>\n                                <th className={cnSearchResult('ReviewGradesCol')}>\n                                    <AiOutlineStar/> {review.usersGradesAvg}\n                                </th>\n                                <th className={cnSearchResult('ReviewOpenCol')}>\n                                    <Button variant=\"dark\" onClick={() => onOpenButtonClick(review.id)}>\n                                        open\n                                    </Button>\n                                </th>\n                            </tr>\n                        )): (\n                            <>\n                                No reviews\n                            </>\n                        )}\n                    </tbody>\n                </Table>\n            </GlobalLayout>\n        </Page>\n    )\n}","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { SignInPage } from './pages/SignInPage/SignInPage';\nimport { MainPage } from './pages/MainPage/MainPage';\nimport { RedirectingPage } from './pages/RedirectingPage/RedirectingPage';\nimport { ReviewPageRead } from './pages/ReviewPageRead/ReviewPageRead';\nimport { MePage } from './pages/MePage/MePage';\nimport { ReviewPageEdit } from './pages/ReviewPageEdit/ReviewPageEdit';\nimport { ReviewPageCreate } from './pages/ReviewPageCreate/ReviewPageCreate';\nimport { SearchResult } from './pages/SearchResult/SearchResult';\n\nexport const routes: React.ReactNode = (\n    <Switch>\n        <Route path=\"/signIn\" exact>\n            <SignInPage/>\n        </Route>\n\n        <Route path=\"/\" exact>\n            <MainPage/>\n        </Route>\n\n        <Route path=\"/me\" exact>\n            <MePage/>\n        </Route>\n\n        <Route path=\"/redirect\" exact>\n            <RedirectingPage/>\n        </Route>\n\n        <Route path=\"/reviews/:reviewId/read\" exact>\n            <ReviewPageRead/>\n        </Route>\n\n        <Route path=\"/reviews/:reviewId/edit\" exact>\n            <ReviewPageEdit/>\n        </Route>\n\n        <Route path=\"/me/reviews/create\" exact>\n            <ReviewPageCreate/>\n        </Route>\n\n        <Route path={['/reviews/search/result/:text', '/reviews/search/result']}>\n            <SearchResult/>\n        </Route>\n    </Switch>\n)","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { QueryClientProvider } from 'react-query';\n\nimport { routes } from '../routes';\nimport { queryClient } from '../queryClient';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { TokenProvider } from '../token';\n\n\nexport const App: React.FC = () => {\n    return (\n        <QueryClientProvider client={queryClient}>\n            <TokenProvider>\n                    <BrowserRouter>\n                        {routes}\n                    </BrowserRouter>\n            </TokenProvider>\n        </QueryClientProvider>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { App } from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}